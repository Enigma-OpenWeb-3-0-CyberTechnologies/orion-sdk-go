// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import http "net/http"
import mock "github.com/stretchr/testify/mock"
import protoiface "google.golang.org/protobuf/runtime/protoiface"
import time "time"

// RestClient is an autogenerated mock type for the RestClient type
type RestClient struct {
	mock.Mock
}

// Query provides a mock function with given fields: ctx, endpoint, msg
func (_m *RestClient) Query(ctx context.Context, endpoint string, msg protoiface.MessageV1) (*http.Response, error) {
	ret := _m.Called(ctx, endpoint, msg)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, protoiface.MessageV1) *http.Response); ok {
		r0 = rf(ctx, endpoint, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, protoiface.MessageV1) error); ok {
		r1 = rf(ctx, endpoint, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Submit provides a mock function with given fields: ctx, endpoint, msg, serverTimeout
func (_m *RestClient) Submit(ctx context.Context, endpoint string, msg protoiface.MessageV1, serverTimeout time.Duration) (*http.Response, error) {
	ret := _m.Called(ctx, endpoint, msg, serverTimeout)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, protoiface.MessageV1, time.Duration) *http.Response); ok {
		r0 = rf(ctx, endpoint, msg, serverTimeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, protoiface.MessageV1, time.Duration) error); ok {
		r1 = rf(ctx, endpoint, msg, serverTimeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
